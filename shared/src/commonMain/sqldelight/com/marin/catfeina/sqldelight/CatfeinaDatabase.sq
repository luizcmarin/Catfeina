-- -- =============================================================================
-- -- Arquivo: shared.src.commonMain.sqldelight.CatfeinaDatabase.sq
-- -- Descrição: Definições de tabelas e queries SQL para o SQLDelight.
-- --            Este arquivo substituirá as Entidades e DAOs do Room.
-- -- =============================================================================
-- import com.marin.catfeina.core.utils.CategoriaPoesiaEnum;
-- import com.marin.catfeina.core.utils.TipoConteudo;
--
--
-- -- =============================================
-- -- Tabela de Poesias
-- -- =============================================
-- CREATE TABLE poesias (
--     id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
--     categoria TEXT AS CategoriaPoesiaEnum NOT NULL,
--     titulo TEXT NOT NULL,
--     textoBase TEXT NOT NULL,
--     texto TEXT NOT NULL,
--     textoFinal TEXT,
--     imagem TEXT,
--     autor TEXT,
--     nota TEXT,
--     campoUrl TEXT,
--     dataCriacao INTEGER NOT NULL
-- );
--
-- -- =============================================
-- -- Tabela de Estado da Poesia (Notas do Usuário)
-- -- =============================================
-- CREATE TABLE PoesiaNota (
--     poesiaId INTEGER NOT NULL PRIMARY KEY,
--     ehFavorita INTEGER NOT NULL DEFAULT 0,
--     foiLida INTEGER NOT NULL DEFAULT 0,
--     dataFavoritado INTEGER,
--     dataLeitura INTEGER,
--     notaUsuario TEXT,
--     FOREIGN KEY(poesiaId) REFERENCES poesias(id) ON DELETE CASCADE
-- );
--
-- -- =============================================
-- -- Tabela de Personagens
-- -- =============================================
-- CREATE TABLE personagens (
--     id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
--     nome TEXT NOT NULL UNIQUE,
--     descricao TEXT NOT NULL,
--     imagem_url TEXT,
--     dataCriacao INTEGER NOT NULL
-- );
--
-- -- =============================================
-- -- Tabela do Atelier (Notas e Rascunhos)
-- -- =============================================
-- CREATE TABLE atelier (
--     id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
--     titulo TEXT NOT NULL,
--     conteudo TEXT NOT NULL,
--     dataAtualizacao INTEGER NOT NULL,
--     fixada INTEGER NOT NULL DEFAULT 0
-- );
--
-- -- =============================================
-- -- Tabela de Marcadores (Atalhos Globais)
-- -- =============================================
-- CREATE TABLE marcadores (
--     slotId INTEGER NOT NULL PRIMARY KEY,
--     tituloDisplay TEXT,
--     rotaNavegacao TEXT,
--     dataSalvo INTEGER
-- );
--
-- -- =============================================
-- -- Tabela de Histórico
-- -- =============================================
-- CREATE TABLE historico (
--     id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
--     tipoConteudo TEXT AS TipoConteudo NOT NULL,
--     conteudoId INTEGER NOT NULL,
--     tituloDisplay TEXT NOT NULL,
--     imagemDisplay TEXT,
--     dataVisita INTEGER NOT NULL
-- );
--
-- -- =============================================
-- -- Tabela de Informativos (Textos Gerais)
-- -- =============================================
-- CREATE TABLE informativos (
--     chave TEXT NOT NULL PRIMARY KEY,
--     conteudo TEXT NOT NULL,
--     dataAtualizacao INTEGER NOT NULL
-- );
--
-- -- =============================================
-- -- Queries para Poesias
-- -- =============================================
-- upsertPoesia: INSERT OR REPLACE INTO poesias(id, categoria, titulo, textoBase, texto, textoFinal, imagem, autor, nota, campoUrl, dataCriacao) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
-- upsertNota: INSERT OR REPLACE INTO PoesiaNota(poesiaId, ehFavorita, foiLida, dataFavoritado, dataLeitura, notaUsuario) VALUES(?, ?, ?, ?, ?, ?);
-- deletePoesiaById: DELETE FROM poesias WHERE id = ?;
-- getPoesiasCompletas: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN PoesiaNota AS pn ON p.id = pn.poesiaId ORDER BY p.dataCriacao DESC;
-- getPoesiaCompletaById: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN PoesiaNota AS pn ON p.id = pn.poesiaId WHERE p.id = ?;
-- getPoesiaAleatoria: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN PoesiaNota AS pn ON p.id = pn.poesiaId ORDER BY RANDOM() LIMIT 1;
-- getPoesiasFavoritas: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p INNER JOIN PoesiaNota AS pn ON p.id = pn.poesiaId WHERE pn.ehFavorita = 1 ORDER BY pn.dataFavoritado DESC;
-- getUltimaPoesiaAdicionada: SELECT * FROM poesias ORDER BY dataCriacao DESC LIMIT 1;
-- countPoesias: SELECT COUNT(id) FROM poesias;
--
-- -- =============================================
-- -- Queries para Atelier
-- -- =============================================
-- upsertAtelier: INSERT OR REPLACE INTO atelier(id, titulo, conteudo, dataAtualizacao, fixada) VALUES (?, ?, ?, ?, ?);
-- deleteAtelier: DELETE FROM atelier WHERE id = ?;
-- deleteAllAtelier: DELETE FROM atelier;
-- getAllAtelier: SELECT * FROM atelier ORDER BY dataAtualizacao DESC;
-- getAtelierById: SELECT * FROM atelier WHERE id = ?;
--
-- -- =============================================
-- -- Queries para Personagens
-- -- =============================================
-- upsertPersonagem: INSERT OR REPLACE INTO personagens(id, nome, descricao, imagem_url, dataCriacao) VALUES (?, ?, ?, ?, ?);
-- deletePersonagemById: DELETE FROM personagens WHERE id = ?;
-- getAllPersonagens: SELECT * FROM personagens ORDER BY nome ASC;
-- getPersonagemById: SELECT * FROM personagens WHERE id = ?;
--
-- -- =============================================
-- -- Queries para Marcadores
-- -- =============================================
-- upsertMarcador: INSERT OR REPLACE INTO marcadores(slotId, tituloDisplay, rotaNavegacao, dataSalvo) VALUES (?, ?, ?, ?);
-- limparMarcador: UPDATE marcadores SET tituloDisplay = NULL, rotaNavegacao = NULL, dataSalvo = NULL WHERE slotId = ?;
-- limparTodosOsMarcadores: DELETE FROM marcadores;
-- getTodosOsMarcadores: SELECT * FROM marcadores ORDER BY slotId ASC;
--
-- -- =============================================
-- -- Queries para Informativos
-- -- =============================================
-- upsertInformativo: INSERT OR REPLACE INTO informativos(chave, conteudo, dataAtualizacao) VALUES (?, ?, ?);
-- getAllInformativos: SELECT * FROM informativos ORDER BY chave ASC;
-- getInformativoByChave: SELECT * FROM informativos WHERE chave = ?;
--
-- -- =============================================
-- -- Queries para Histórico
-- -- =============================================
-- upsertHistorico: INSERT OR REPLACE INTO historico(id, tipoConteudo, conteudoId, tituloDisplay, imagemDisplay, dataVisita) VALUES (?, ?, ?, ?, ?, ?);
-- limparHistorico: DELETE FROM historico;
-- getHistoricoCompleto: SELECT * FROM historico ORDER BY dataVisita DESC;
--
-- -- =============================================
-- -- Queries para Busca (Search)
-- -- =============================================
-- searchPoesias: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN PoesiaNota AS pn ON p.id = pn.poesiaId WHERE p.titulo LIKE '%' || ? || '%' OR p.texto LIKE '%' || ? || '%';
-- searchPersonagens: SELECT * FROM personagens WHERE nome LIKE '%' || ? || '%' OR descricao LIKE '%' || ? || '%';
