-- =============================================================================
-- Arquivo: sqldelight.Catfeina.sq
-- Descrição: Definições de tabelas e queries SQL para o SQLDelight.
-- =============================================================================

import kotlin.Boolean;
import com.marin.catfeina.core.utils.CategoriaPoesiaEnum;
import com.marin.catfeina.core.utils.TipoConteudoEnum;


-- =============================================
-- Tabela de Poesias
-- =============================================
CREATE TABLE poesias (
    id INTEGER NOT NULL PRIMARY KEY,
    categoria TEXT AS CategoriaPoesiaEnum NOT NULL,
    titulo TEXT NOT NULL,
    textoBase TEXT NOT NULL,
    texto TEXT NOT NULL,
    textoFinal TEXT,
    imagem TEXT,
    autor TEXT,
    nota TEXT,
    campoUrl TEXT,
    dataCriacao INTEGER NOT NULL
);
CREATE UNIQUE INDEX idx_poesia_titulo ON poesias(titulo);

-- =============================================
-- Tabela de Estado da Poesia (Notas do Usuário)
-- =============================================
CREATE TABLE poesia_notas (
    poesiaId INTEGER NOT NULL PRIMARY KEY,
    ehFavorita INTEGER AS Boolean NOT NULL DEFAULT 0,
    foiLida INTEGER AS Boolean NOT NULL DEFAULT 0,
    dataFavoritado INTEGER,
    dataLeitura INTEGER,
    notaUsuario TEXT,
    FOREIGN KEY(poesiaId) REFERENCES poesias(id) ON DELETE CASCADE
);

-- =============================================
-- Tabela de Personagens
-- =============================================
CREATE TABLE personagens (
    id INTEGER NOT NULL PRIMARY KEY,
    nome TEXT NOT NULL UNIQUE,
    descricao TEXT NOT NULL,
    imagem_url TEXT,
    dataCriacao INTEGER NOT NULL
);
CREATE UNIQUE INDEX idx_personagem_nome ON personagens(nome);

-- =============================================
-- Tabela do Atelier (Notas e Rascunhos)
-- =============================================
CREATE TABLE atelier (
    id INTEGER NOT NULL PRIMARY KEY,
    titulo TEXT NOT NULL,
    conteudo TEXT NOT NULL,
    dataAtualizacao INTEGER NOT NULL,
    fixada INTEGER AS Boolean NOT NULL DEFAULT 0
);

-- =============================================
-- Tabela de Histórico
-- =============================================
CREATE TABLE historico (
    id INTEGER NOT NULL PRIMARY KEY,
    tipoConteudo TEXT AS TipoConteudoEnum NOT NULL,
    conteudoId INTEGER NOT NULL,
    tituloDisplay TEXT NOT NULL,
    imagemDisplay TEXT,
    dataVisita INTEGER NOT NULL
);

-- =============================================
-- Tabela de Informativos (Textos Gerais)
-- =============================================
CREATE TABLE informativos (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    chave TEXT NOT NULL UNIQUE,
    titulo TEXT NOT NULL,
    conteudo TEXT NOT NULL,
    dataAtualizacao INTEGER NOT NULL
);

-- =============================================
-- Queries para Poesias
-- =============================================
upsertPoesia: INSERT OR REPLACE INTO poesias(id, categoria, titulo, textoBase, texto, textoFinal, imagem, autor, nota, campoUrl, dataCriacao) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
upsertNota: INSERT OR REPLACE INTO poesia_notas(poesiaId, ehFavorita, foiLida, dataFavoritado, dataLeitura, notaUsuario) VALUES(?, ?, ?, ?, ?, ?);
deletePoesiaById: DELETE FROM poesias WHERE id = ?;
getPoesiasCompletas: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN poesia_notas AS pn ON p.id = pn.poesiaId ORDER BY p.dataCriacao DESC;
getPoesiaCompletaById: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN poesia_notas AS pn ON p.id = pn.poesiaId WHERE p.id = ?;
getPoesiaAleatoria: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN poesia_notas AS pn ON p.id = pn.poesiaId ORDER BY RANDOM() LIMIT 1;
getPoesiasFavoritas: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p INNER JOIN poesia_notas AS pn ON p.id = pn.poesiaId WHERE pn.ehFavorita = 1 ORDER BY pn.dataFavoritado DESC;
getUltimaPoesiaAdicionada: SELECT * FROM poesias ORDER BY dataCriacao DESC LIMIT 1;
countPoesias: SELECT COUNT(id) FROM poesias;
getPoesiasPaginadas:
SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario
FROM poesias AS p
LEFT JOIN poesia_notas AS pn ON p.id = pn.poesiaId
ORDER BY p.dataCriacao DESC
LIMIT ? OFFSET ?;

-- =============================================
-- Queries para Atelier
-- =============================================
upsertAtelier: INSERT OR REPLACE INTO atelier(id, titulo, conteudo, dataAtualizacao, fixada) VALUES (?, ?, ?, ?, ?);
deleteAtelier: DELETE FROM atelier WHERE id = ?;
deleteAllAtelier: DELETE FROM atelier;
getAllAtelier: SELECT * FROM atelier ORDER BY dataAtualizacao DESC;
getAtelierById: SELECT * FROM atelier WHERE id = ?;

-- =============================================
-- Queries para Personagens
-- =============================================
upsertPersonagem: INSERT OR REPLACE INTO personagens(id, nome, descricao, imagem_url, dataCriacao) VALUES (?, ?, ?, ?, ?);
deletePersonagemById: DELETE FROM personagens WHERE id = ?;
getAllPersonagens: SELECT * FROM personagens ORDER BY nome ASC;
getPersonagemById: SELECT * FROM personagens WHERE id = ?;

-- =============================================
-- Queries para Informativos
-- =============================================
upsertInformativo: INSERT OR REPLACE INTO informativos(chave, titulo, conteudo, dataAtualizacao) VALUES (?, ?, ?, ?);
getAllInformativos: SELECT * FROM informativos ORDER BY chave ASC;
getInformativoByChave: SELECT * FROM informativos WHERE chave = ?;

-- =============================================
-- Queries para Histórico
-- =============================================
upsertHistorico: INSERT OR REPLACE INTO historico(id, tipoConteudo, conteudoId, tituloDisplay, imagemDisplay, dataVisita) VALUES (?, ?, ?, ?, ?, ?);
limparHistorico: DELETE FROM historico;
getHistoricoCompleto: SELECT * FROM historico ORDER BY dataVisita DESC;

-- =============================================
-- Queries para Busca (Search)
-- =============================================
searchPoesias: SELECT p.id, p.categoria, p.titulo, p.texto, p.imagem, p.autor, p.nota, p.textoBase, p.textoFinal, p.campoUrl, p.dataCriacao, COALESCE(pn.ehFavorita, 0) AS isFavorito, pn.dataFavoritado, COALESCE(pn.foiLida, 0) AS isLido, pn.dataLeitura, pn.notaUsuario FROM poesias AS p LEFT JOIN poesia_notas AS pn ON p.id = pn.poesiaId WHERE p.titulo LIKE '%' || ? || '%' OR p.texto LIKE '%' || ? || '%';
searchPersonagens: SELECT * FROM personagens WHERE nome LIKE '%' || ? || '%' OR descricao LIKE '%' || ? || '%';
