/*
 *  Projeto: Catfeina
 *  Arquivo: AtelierEditScreen.kt
 *
 *  Direitos autorais (c) 2025 Marin. Todos os direitos reservados.
 *
 *  Autores: Luiz Carlos Marin / Ivete Gielow Marin / Caroline Gielow Marin
 *
 *  Este arquivo faz parte do projeto Catfeina.
 *  A reprodução ou distribuição não autorizada deste arquivo, ou de qualquer parte
 *  dele, é estritamente proibida.
 *
 *  Nota:
 *
 */

\npackage com.marin.catfeina.features.atelier.presentation.edit\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material.icons.filled.Done\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun AtelierEditScreen(\n    viewModel: AtelierEditViewModel = hiltViewModel(),\n    onNavigateBack: () -> Unit\n) {\n    val uiState by viewModel.uiState.collectAsState()\n\n    LaunchedEffect(key1 = true) {\n        viewModel.eventFlow.collect { event ->\n            when (event) {\n                AtelierEditEvent.NavigateBack -> onNavigateBack()\n                else -> {}\n            }\n        }\n    }\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(if (uiState.nota?.id == 0L) \"Nova Nota\" else \"Editar Nota\") },\n                navigationIcon = {\n                    IconButton(onClick = onNavigateBack) {\n                        Icon(Icons.Default.ArrowBack, contentDescription = \"Voltar\")\n                    }\n                },\n                actions = {\n                    if (uiState.nota?.id != 0L) {\n                        IconButton(onClick = { viewModel.onEvent(AtelierEditEvent.DeletarNota) }) {\n                            Icon(Icons.Default.Delete, contentDescription = \"Deletar\")\n                        }\n                    }\n                    IconButton(\n                        onClick = { viewModel.onEvent(AtelierEditEvent.SalvarNota) },\n                        enabled = uiState.podeSalvar\n                    ) {\n                        Icon(Icons.Default.Done, contentDescription = \"Salvar\")\n                    }\n                }\n            )\n        }\n    ) { padding ->\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(padding)\n        ) {\n            if (uiState.isLoading) {\n                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))\n            } else {\n                uiState.nota?.let { nota ->\n                    Column(modifier = Modifier.padding(16.dp)) {\n                        OutlinedTextField(\n                            value = nota.titulo,\n                            onValueChange = { viewModel.onEvent(AtelierEditEvent.OnTituloChange(it)) },\n                            label = { Text(\"Título\") },\n                            modifier = Modifier.fillMaxWidth(),\n                            singleLine = true\n                        )\n                        Spacer(modifier = Modifier.height(16.dp))\n                        OutlinedTextField(\n                            value = nota.conteudo,\n                            onValueChange = { viewModel.onEvent(AtelierEditEvent.OnConteudoChange(it)) },\n                            label = { Text(\"Conteúdo\") },\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .weight(1f)\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n